python提供了一种把序列切成小块的写法

这种操作叫切片操作，使得开发者能够轻易地访问序列中的某些元素所构成的子集

最简单的用法，就是对内置的list，str，bytes进行切割

切割操作还可以延伸到实现了__getitem__和__setitem__这两个特殊的方法的Python类上

不要写多余的代码，当star索引为0或者end索引为序列长度时，应该将其省略

切片操作不会计较start与end索引是否越界，这使得我们容易就能从序列的前端或者后端开始，对其进行范围固定的切片操作，例如，a[:20], a[-20:]

对list赋值的时候，如果使用切片操作，就会把原列表中处于相关范围内的值替换成新的值，即便他们的长度不同也依然可以替换

对原列表进行切割之后，会产生另外一份全新的列表，系统依然维护指向原列表中各个对象的引用
在切割后的到的新列表上进行修改，不会影响原列表

在单次切片操作内，不要同时指定start，end和stride

除了基本的切片操作之外，python还提供了somelist[start:end:stride]
形式的写法，以实现步进式切割，也就是从每个n个元素里面取1个出来

既有start和end，又有stride的切割操作，可能会令人费解

尽量使用stride为正书，且不带start或者end索引的切片操作，尽量避免用负数做stride

在同一个切片操作内，不要同时使用start，end和stride

如果确实需要执行这种操作，那就考虑将其拆解为两条赋值语句，其中
一条做范围切割，另一条做进步切割，或者考虑使用内置itertools模块中的islice
